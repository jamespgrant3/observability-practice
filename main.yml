Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  ApiEcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: true
      RepositoryName: api

  UserApiEcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      EmptyOnDelete: true
      RepositoryName: user-api

  UserApiTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: a role for the user api task execution
      RoleName: user-api-task

  UserApiExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: a role for the user task
      RoleName: user-api-task-execution
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: user-api-service
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource: !Join
                  - ':'
                  - - 'arn:aws:ecr'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'repository/user-api'
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Join
                  - ':'
                  - - 'arn:aws:secretsmanager'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'secret'
                    - 'NewRelicLicenseKeySecret-GhJeDizcW7tK-GnYqOb'

  UserApiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Cpu: 256
          Environment:
            - Name: NEW_RELIC_APP_NAME
              Value: user-api
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/user-api:latest'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              "awslogs-region": "us-east-1"
              "awslogs-group": "ecs-practice"
              "awslogs-stream-prefix": "user-api"
          Memory: 512
          Name: user-api
          PortMappings:
            - AppProtocol: http
              ContainerPort: 3000
              Protocol: tcp
          Secrets:
            - Name: NEW_RELIC_LICENSE_KEY
              ValueFrom: !Join
                - ':'
                - - 'arn:aws:secretsmanager'
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - 'secret'
                  - 'NewRelicLicenseKeySecret-GhJeDizcW7tK-GnYqOb'
        - Cpu: 256
          Environment:
            - Name: NRIA_OVERRIDE_HOST_ROOT
              Value: ""
            - Name: NRIA_IS_FORWARD_ONLY
              Value: true
            - Name: FARGATE
              Value: true
            - Name: NRIA_PASSTHROUGH_ENVIRONMENT
              Value: "ECS_CONTAINER_METADATA_URI,ECS_CONTAINER_METADATA_URI_V4,FARGATE"
            - Name: NRIA_CUSTOM_ATTRIBUTES
              Value: "{\"nrDeployMethod\":\"downloadPage\"}"
          Image: newrelic/nri-ecs:1.10.8
          Memory: 512
          Name: newrelic-infra
          Secrets:
            - Name: NRIA_LICENSE_KEY
              ValueFrom: !Join
                - ':'
                - - 'arn:aws:secretsmanager'
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - 'secret'
                  - 'NewRelicLicenseKeySecret-GhJeDizcW7tK-GnYqOb'
      Cpu: 512
      ExecutionRoleArn: !GetAtt UserApiExecutionRole.Arn
      Family: user-api
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt UserApiTaskRole.Arn

  UserApiEcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow traffic to user api
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt ApiEcsSecurityGroup.GroupId
          Description: allow ingress traffic from api task
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
      VpcId: !Ref VPC

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ecs-practice

  ApiNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Description: map user api to a dns entry
      Name: api.local
      Vpc: !Ref VPC

  UserApiServiceDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: user api service discovery service
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 30
            Type: A
          - TTL: 30
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: user
      NamespaceId: !Ref ApiNamespace

  UserApiEcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !GetAtt EcsCluster.Arn
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !GetAtt UserApiEcsSecurityGroup.GroupId
      ServiceName: user-api
      TaskDefinition: !GetAtt UserApiTaskDefinition.TaskDefinitionArn
      ServiceRegistries:
        - ContainerName: user-api
          ContainerPort: 3000
          RegistryArn: !GetAtt UserApiServiceDiscoveryService.Arn

  UserApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupClass: STANDARD
      LogGroupName: ecs-practice
      RetentionInDays: 3


  ApiListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApiTargetGroup
      LoadBalancerArn: !Ref ApiLoadBalancer
      Port: 80
      Protocol: HTTP

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow http ingress from the internet
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: allow http ingress from the internet
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      VpcId: !Ref VPC

  ApiLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGatewayAttachment
    Properties:
      IpAddressType: ipv4
      Name: api
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets:
        - !GetAtt PublicSubnet1.SubnetId
        - !GetAtt PublicSubnet2.SubnetId
      Type: application

  ApiTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: a role for the api task execution
      RoleName: api-task

  ApiExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: a role for the api task
      RoleName: api-task-execution
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: api-service
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource: !Join
                  - ':'
                  - - 'arn:aws:ecr'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'repository/api'
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Join
                  - ':'
                  - - 'arn:aws:secretsmanager'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'secret'
                    - 'NewRelicLicenseKeySecret-GhJeDizcW7tK-GnYqOb'

  ApiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Cpu: 256
          Environment:
            - Name: USER_API_HOST
              Value: user.api.local
            - Name: USER_API_PORT
              Value: 3000
            - Name: NEW_RELIC_APP_NAME
              Value: api
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/api:latest'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              "awslogs-region": "us-east-1"
              "awslogs-group": "ecs-practice"
              "awslogs-stream-prefix": "api"
          Memory: 512
          Name: api
          PortMappings:
            - AppProtocol: http
              ContainerPort: 3000
              Protocol: tcp
          Secrets:
            - Name: NEW_RELIC_LICENSE_KEY
              ValueFrom: !Join
                - ':'
                - - 'arn:aws:secretsmanager'
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - 'secret'
                  - 'NewRelicLicenseKeySecret-GhJeDizcW7tK-GnYqOb'
        - Cpu: 256
          Environment:
            - Name: NRIA_OVERRIDE_HOST_ROOT
              Value: ""
            - Name: NRIA_IS_FORWARD_ONLY
              Value: true
            - Name: FARGATE
              Value: true
            - Name: NRIA_PASSTHROUGH_ENVIRONMENT
              Value: "ECS_CONTAINER_METADATA_URI,ECS_CONTAINER_METADATA_URI_V4,FARGATE"
            - Name: NRIA_CUSTOM_ATTRIBUTES
              Value: "{\"nrDeployMethod\":\"downloadPage\"}"
          Image: newrelic/nri-ecs:1.10.8
          Memory: 512
          Name: newrelic-infra
          Secrets:
            - Name: NRIA_LICENSE_KEY
              ValueFrom: !Join
                - ':'
                - - 'arn:aws:secretsmanager'
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - 'secret'
                  - 'NewRelicLicenseKeySecret-GhJeDizcW7tK-GnYqOb'
      Cpu: 512
      ExecutionRoleArn: !GetAtt UserApiExecutionRole.Arn
      Family: api
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !GetAtt ApiTaskRole.Arn

  ApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckPort: 3000
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: api
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC

  ApiEcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow ingress alb traffic
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
          Description: allow ingress alb traffic
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
      VpcId: !Ref VPC

  ApiEcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - ApiListener
    Properties:
      Cluster: !GetAtt EcsCluster.Arn
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: api
          ContainerPort: 3000
          TargetGroupArn: !Ref ApiTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !GetAtt ApiEcsSecurityGroup.GroupId
      ServiceName: api
      TaskDefinition: !GetAtt ApiTaskDefinition.TaskDefinitionArn

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
